---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

const posts = await getCollection('blog');

// Group posts by category (first folder in id)
const grouped = {};
for (const post of posts) {
	// id example: 'Linux/1) Introduction'
	const [category, ...rest] = post.id.split('/');
	if (!grouped[category]) grouped[category] = [];
	grouped[category].push(post);
}
// Optionally, sort categories and posts alphabetically
const sortedCategories = Object.keys(grouped).sort();
for (const cat of sortedCategories) {
	grouped[cat].sort((a, b) => a.id.localeCompare(b.id));
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 3em 1em;
				border: 1px solid var(--terminal-border);
				border-radius: 4px;
				background-color: rgba(40, 42, 54, 0.3);
				box-shadow: 0 0 10px rgba(189, 147, 249, 0.1);
			}
			.tree {
				font-family: 'Fira Code', monospace;
				font-size: 1.1em;
				margin: 2em 0;
				padding-left: 0.5em;
			}
			.tree-category {
				color: var(--terminal-purple);
				font-weight: bold;
				margin-top: 1.5em;
				margin-bottom: 0.2em;
				font-size: 1.2em;
			}
			.tree-line {
				color: var(--terminal-green);
				white-space: pre;
				display: inline;
			}
			.tree-link {
				color: var(--terminal-cyan);
				text-decoration: none;
				border-bottom: 1px dotted var(--terminal-cyan);
				transition: all 0.2s ease;
			}
			.tree-link:hover {
				color: var(--terminal-pink);
				border-bottom: 1px solid var(--terminal-pink);
				text-shadow: 0 0 8px rgba(255, 121, 198, 0.3);
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<h1>Notes</h1>
			<div class="tree">
				{sortedCategories.map((cat) => (
					<div>
						<div class="tree-category">{cat.charAt(0).toUpperCase() + cat.slice(1)}</div>
						{grouped[cat].map((post, idx, arr) => (
							<div>
								<span class="tree-line">â†³</span>
								<a class="tree-link" href={`/blog/${post.id}/`}>{post.data.title}</a>
							</div>
						))}
					</div>
				))}
			</div>
		</main>
		<Footer />
	</body>
</html>
